---
# app_name, rpm_name and rpm_folder are standard variables, must be redefined for each role
# it allows re-usage of tasks

app_name: "Talend Kafka"
rpm_name: "talend-kafka"
rpm_folder: "kafka"

# Variable (RPM version) for Kafka RPM
kafka_pkg_version: "{{ rpm_version }}-1"

#####
# Installation as systemd service
#####
app_install_systemd: "yes" # allowed values "yes" and "no"

# Zookeeper-specific properties

zook_setacl: "yes" # Whether to harden ZK security by activating ACL-based access to ZK.
                   # Note: this also requires that system service is going to be installed
                   # (as some of actions will take place while ZK is running)

zook_datadir: "/tmp/zookeeper"
zook_clientPort: 2181
zook_macClientCnxns: 0

# Kafka-specific properties

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
kafka_broker_id: 0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
kafka_listeners: "PLAINTEXT://:9092"

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
kafka_advertised_listeners: ""

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
kafka_listener_security_protocol_map: ""

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
kafka_num_network_threads: 3

# The number of threads that the server uses for processing requests, which may include disk I/O
kafka_num_io_threads: 8

# The send buffer (SO_SNDBUF) used by the socket server
kafka_socket_send_buffer_bytes: 102400

# The receive buffer (SO_RCVBUF) used by the socket server
kafka_socket_receive_buffer_bytes: 102400

# The maximum size of a request that the socket server will accept (protection against OOM)
kafka_socket_request_max_bytes: 104857600

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
kafka_log_dirs: "/tmp/kafka-logs"

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
kafka_num_partitions: 1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
kafka_num_recovery_threads_per_data_dir: 1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
kafka_offsets_topic_replication_factor: 1
kafka_transaction_state_log_replication_factor: 1
kafka_transaction_state_log_min_isr: 1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
kafka_log_flush_interval_messages: 10000

# The maximum amount of time a message can sit in a log before we force a flush
kafka_log_flush_interval_ms: 1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
kafka_log_retention_hours: 168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
kafka_log_retention_bytes: 1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
kafka_log_segment_bytes: 1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
kafka_log_retention_check_interval_ms: 300000

################# Zookeeper settings for Kafka (must match with beginning of this file) ###########

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
kafka_zookeeper_connect: "localhost:2181"

# Timeout in ms for connecting to zookeeper
kafka_zookeeper_connection_timeout_ms: 6000

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
kafka_group_initial_rebalance_delay_ms: 0
