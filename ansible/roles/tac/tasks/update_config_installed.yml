---

# This script used to update current application parameters if the application is already installed
# It can be run just after the installation or after some time (re-configuration)
# Some parameters cannot be re-configured (installation path, user, group, tomcat deployment, systemd status)
# All other parameters must be reconfigured here

# Update admin user/password

- name: Update TAC admin user
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  'install\.defaultaccount\.login=.*'
    replace: 'install.defaultaccount.login={{ tac_admin_user }}'

- name: Update TAC admin password
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  'install\.defaultaccount\.password=.*'
    replace: 'install.defaultaccount.password={{ tac_admin_pass }}'

- name: Update SSO status
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  'sso\.field\.useSSOLogin=.*'
    replace: "sso.field.useSSOLogin={{ 'true' if tac_use_sso == 'yes' else 'false' }}"

#
# Work with LogServer (Filebeat)
#
- name: Create logs folder for Filebeat
  when: tac_audit_log_enabled == 'yes'
  file:
    path: "{{ install_prefix }}/tac/logs"
    state: directory
    owner: "{{ install_user }}"
    group: "{{ install_group }}"
    mode: 0755

- name: Update Filebeat config for talendAppender
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "log4j.path.talendAppender={{ install_prefix }}/tac/logs/technical.log"
    create: yes

- name: Update Filebeat config for businessLog
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "businessLog.path={{ install_prefix }}/tac/logs/business.log"
    create: yes

#
# Update database parameters
#

# For H2 database
- name: Update DB URL for H2 database
  when: tac_database == "h2"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:h2:{0}/WEB-INF/database/talend_administrator;MV_STORE=FALSE;AUTO_SERVER=TRUE;lock_timeout=15000;DEFAULT_LOCK_TIMEOUT=15000;LOCK_MODE=0"

- name: Update DB Driver for H2 database
  when: tac_database == "h2"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=org.h2.Driver"

- name: Update DB User name for H2 database
  when: tac_database == "h2"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for H2 database
  when: tac_database == "h2"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# For MySQL database
- name: Update DB URL for MySQL database
  when: tac_database == "mysql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:mysql://{{ tac_db_host }}:{{ tac_db_port }}/{{ tac_db_name }}"

- name: Update DB Driver for MySQL database
  when: tac_database == "mysql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=com.mysql.cj.jdbc.Driver"

- name: Update DB User name for MySQL database
  when: tac_database == "mysql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for MySQL database
  when: tac_database == "mysql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# For Oracle database
- name: Update DB URL for Oracle database
  when: tac_database == "oracle"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:oracle:thin:@{{ tac_db_host }}:{{ tac_db_port }}:{{ tac_db_name }}"

- name: Update DB Driver for Oracle database
  when: tac_database == "oracle"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=oracle.jdbc.driver.OracleDriver"

- name: Update DB User name for Oracle database
  when: tac_database == "oracle"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for Oracle database
  when: tac_database == "oracle"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# For PostgreSQL
- name: Update DB URL for PostgreSQL database
  when: tac_database == "postgresql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:postgresql://{{ tac_db_host }}:{{ tac_db_port }}/{{ tac_db_name }}"

- name: Update DB Driver for PostgreSQL database
  when: tac_database == "postgresql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=org.postgresql.Driver"

- name: Update DB User name for PostgreSQL database
  when: tac_database == "postgresql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for PostgreSQL database
  when: tac_database == "postgresql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# For Microsoft SQL
- name: Update DB URL for Microsoft SQL database
  when: tac_database == "mssql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:jtds:sqlserver://{{ tac_db_host }}:{{ tac_db_port }}/{{ tac_db_name }}"

- name: Update DB Driver for Microsoft SQL database
  when: tac_database == "mssql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=net.sourceforge.jtds.jdbc.Driver"

- name: Update DB User name for Microsoft SQL database
  when: tac_database == "mssql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for Microsoft SQL database
  when: tac_database == "mssql"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# For MariaDB
- name: Update DB URL for MariaDB
  when: tac_database == "mariadb"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.url=.*'
    replace: "database.url=jdbc:mariadb://{{ tac_db_host }}:{{ tac_db_port }}/{{ tac_db_name }}"

- name: Update DB Driver for MariaDB
  when: tac_database == "mariadb"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.driver=.*'
    replace: "database.driver=org.mariadb.jdbc.Driver"

- name: Update DB User name for MariaDB
  when: tac_database == "mariadb"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.username=.*'
    replace: "database.username={{ tac_db_user }}"

- name: Update DB User password for MariaDB
  when: tac_database == "mariadb"
  replace:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp:  '^database\.password=.*'
    replace: "database.password={{ tac_db_password }}"

# Copy DB Driver
- name: Copy DB Driver (talend tomcat)
  when: tac_database != "h2" and app_use_talend_tomcat == "yes"
  copy:
    src: "{{ tac_db_driver }}"
    dest: "{{ install_prefix + '/' + rpm_folder + '/tomcat/lib' }}"
    owner: "{{ install_user }}"
    group: "{{ install_group }}"
    mode: 0644

#
# Setup JobServer
#
- name: Setup JobServer without username and password
  when: tac_setup_jobserver == 'yes' and tac_jobserver_username == '' and tac_jobserver_password == ''
  lineinfile:
    path: "{{ tac_config_location }}/install.txt"
    line: "add.remote.jobserver={{ tac_jobserver_name }},{{ tac_jobserver_host }},{{ tac_jobserver_command_port }},{{ tac_jobserver_file_transfer_port }},{{ tac_jobserver_monitoring_port }}"
    create: yes

- name: Setup JobServer with username and password
  when: tac_setup_jobserver == 'yes' and tac_jobserver_username != '' and tac_jobserver_password != ''
  lineinfile:
    path: "{{ tac_config_location }}/install.txt"
    line: "add.remote.jobserver={{ tac_jobserver_name }},{{ tac_jobserver_host }},{{ tac_jobserver_command_port }},{{ tac_jobserver_file_transfer_port }},{{ tac_jobserver_monitoring_port }},{{ tac_jobserver_username }},{{ tac_jobserver_password }}"
    create: yes

#
# Setup http appender
#
- name: Update http appender url
  replace:
    path: "{{ tac_config_location }}/audit.properties"
    regexp:  '^appender\.http\.url=.*'
    replace: "appender.http.url=http://{{ tac_appender_http_host }}:{{ tac_appender_http_port }}/"

- name: Update http appender username
  when: tac_appender_http_username != ''
  replace:
    path: "{{ tac_config_location }}/audit.properties"
    regexp:  '^(#)?(\s)*appender.http.username=.*'
    replace: "appender.http.username={{ tac_appender_http_username }}"

- name: Update http appender password
  when: tac_appender_http_password != ''
  replace:
    path: "{{ tac_config_location }}/audit.properties"
    regexp:  '^(#)?(\s)*appender.http.password=.*'
    replace: "appender.http.password={{ tac_appender_http_password }}"

#
# Setup Nexus/Archiva configuration
#

#
# Setup jobExecution root path
#
- name: Ensure jobExecution root path exists
  file:
    path: '{{ tac_scheduler_conf_jobExecutionLogs_rootPath }}'
    state: directory
    mode: 0755
    owner: '{{ install_user }}'
    group: '{{ install_group }}'

- name: Ensure archivesJobs root path exists
  file:
    path: '{{ tac_scheduler_conf_archivesJobsRootPath }}'
    state: directory
    mode: 0755
    owner: '{{ install_user }}'
    group: '{{ install_group }}'

- name: Update jobExecution root path
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp: 'scheduler\.conf\.jobExecutionLogs\.rootPath=.*'
    line: "scheduler.conf.jobExecutionLogs.rootPath={{ tac_scheduler_conf_jobExecutionLogs_rootPath }}"
    state: present

- name: Update archivesJobs root path
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    regexp: 'scheduler\.conf\.archivesJobsRootPath=.*'
    line: "scheduler.conf.archivesJobsRootPath={{ tac_scheduler_conf_archivesJobsRootPath }}"
    state: present

#
# Setup external repositories access
#

# Talend Updates repository connection

- name: Setup Talend updates repo connection (1)
  when: tac_repo_config|bool and tac_updates_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.talend.url={{ tac_updates_repository_url }}"

- name: Setup Talend updates repo connection (2)
  when: tac_repo_config|bool and tac_updates_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.talend.username={{ tac_updates_repository_user }}"

- name: Setup Talend updates repo connection (3)
  when: tac_repo_config|bool and tac_updates_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.talend.password={{ tac_updates_repository_password }}"

# Talend downloads repository (Talend patch repository) connection
- name: Setup Talend downloads repo connection (1)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.conf.repo.type={{ tac_swupd_repotype }}"

- name: Setup Talend downloads repo connection (2)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector }}url={{ tac_downloads_repository_url }}"

- name: Setup Talend downloads repo connection (3)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector }}username={{ tac_downloads_repository_user }}"

- name: Setup Talend downloads repo connection (4)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector }}password={{ tac_downloads_repository_password }}"

- name: Setup Talend downloads repo connection (5)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector }}username.reader={{ tac_downloads_repository_reader_user }}"

- name: Setup Talend downloads repo connection (6)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector }}password.reader={{ tac_downloads_repository_reader_password }}"

- name: Setup Talend downloads repo connection (7)
  when: tac_repo_config|bool and tac_updates_repository|bool and tac_downloads_repository|bool
  lineinfile:
    path: "{{ tac_config_location }}/configuration.properties"
    line: "softwareupdate.localRepo.{{ tac_swupd_selector2 }}.repositoryID={{ tac_downloads_repository_repository_id }}"

