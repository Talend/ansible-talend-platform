---
# This script used for updating current application parameters (first install & upgrade)
# It can be run just after the installation or after some time (re-configuration)

#####
# Set the path to the tomcat config location of TDS
#####
- name: Set tds_config_location when talend tomcat is used or customer tomcat in shared mode
  when: app_use_talend_tomcat == 'yes' or (app_use_talend_tomcat == 'no' and app_tomcat_mode == 'shared')
  set_fact:
    tds_config_location: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/data-stewardship.properties"

- name: Set tds_config_audit_location when talend tomcat is used or customer tomcat in shared mode
  when: app_use_talend_tomcat == 'yes' or (app_use_talend_tomcat == 'no' and app_tomcat_mode == 'shared')
  set_fact:
    tds_config_audit_location: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/audit.properties"

- name: Set tds_config_location when customer tomcat is used in direct mode
  when: app_use_talend_tomcat == 'no' and app_tomcat_mode == 'direct'
  set_fact:
    tds_config_location: "{{ app_tomcat_home }}/conf/data-stewardship.properties"

- name: Set tds_config_audit_location when customer tomcat is used in direct mode
  when: app_use_talend_tomcat == 'no' and app_tomcat_mode == 'direct'
  set_fact:
    tds_config_audit_location: "{{ app_tomcat_home }}/conf/audit.properties"

#####
# Update TDS configuration
#####
# Kafka
- name: Update kafka broker
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^kafka\.broker=.*'
    replace: 'kafka.broker={{ tds_kafka_host }}:{{ tds_kafka_port }}'


# MongoDB
- name: Update MongoDB hosts
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^spring\.data\.mongodb\.host=.*'
    replace: 'spring.data.mongodb.host={{ tds_mongo_host }}'

- name: Update MongoDB port
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^spring\.data\.mongodb\.port=.*'
    replace: 'spring.data.mongodb.port={{ tds_mongo_port }}'

- name: Update MongoDB dbname
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^spring\.data\.mongodb\.database=.*'
    replace: 'spring.data.mongodb.database={{ tds_mongo_database }}'

- name: Update MongoDB user
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^spring\.data\.mongodb\.username=.*'
    replace: 'spring.data.mongodb.username={{ tds_mongo_username }}'

- name: Update MongoDB password
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^spring\.data\.mongodb\.password=.*'
    replace: 'spring.data.mongodb.password={{ tds_mongo_password }}'


# Security / authent
- name: Update scim url (IAM) - non-hybrid
  when: tds_hybrid_mode == 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^scim\.url=.*'
    replace: 'scim.url={{ tds_security_scim_url }}'
    
- name: Update oidc url - non-hybrid
  when: tds_hybrid_mode == 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.url=.*'
    replace: 'oidc.url={{ tds_security_oidc_url }}'
    
- name: Update oidc userauth url - non-hybrid
  when: tds_hybrid_mode == 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.userauth\.url=.*'
    replace: 'oidc\.userauth.url={{ tds_security_oidc_user_auth_url }}'
    
- name: Update scim url (IAM) - hybrid
  when: tds_hybrid_mode != 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^scim\.url=.*'
    replace: 'scim.url=https://api.{{ tds_hybrid_region }}.cloud.talend.com/v1/scim/'
    
- name: Update oidc url - hybrid
  when: tds_hybrid_mode != 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.url=.*'
    replace: 'oidc.url=https://iam.{{ tds_hybrid_region }}.cloud.talend.com/oidc'
    
- name: Update oidc userauth url - hybrid
  when: tds_hybrid_mode != 'no'
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.userauth\.url=.*'
    replace: 'oidc\.userauth.url=https://iam.{{ tds_hybrid_region }}.cloud.talend.com/oidc'
    
- name: Update oidc gateway ID
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.gateway\.id=.*'
    replace: 'oidc.gateway.id={{ tds_oidc_id }}'
    
- name: Update oidc gateway secret
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.gateway\.secret=.*'
    replace: 'oidc.gateway.secret={{ tds_oidc_secret }}'
    
- name: Update oidc tds ID
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.tds\.id=.*'
    replace: 'oidc.tds.id={{ tds_oidc_id }}'
    
- name: Update oidc tds secret
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.tds\.secret=.*'
    replace: 'oidc.tds.secret={{ tds_oidc_secret }}'
    
- name: Update oidc history ID
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.history\.id=.*'
    replace: 'oidc.history.id={{ tds_oidc_id }}'
    
- name: Update oidc history secret
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.history\.secret=.*'
    replace: 'oidc.history.secret={{ tds_oidc_secret }}'
    
- name: Update oidc schema ID
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.schema\.id=.*'
    replace: 'oidc.schema.id={{ tds_oidc_id }}'
    
- name: Update oidc schema secret
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.schema\.secret=.*'
    replace: 'oidc.schema.secret={{ tds_oidc_secret }}'
    
- name: Update oidc.monitoring.id
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.monitoring\.id=.*'
    replace: 'oidc.monitoring.id={{ tds_oidc_id }}'

- name: Update oidc.monitoring.secret
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^oidc\.monitoring\.secret=.*'
    replace: 'oidc.monitoring.secret={{ tds_oidc_secret }}'


# Activate semantic or not
- name: Activate semantic dictionary
  when: tds_use_semantic_dictionary == "yes"
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^semanticservice\.url=.*'
    replace: 'semanticservice.url={{ tds_semantic_dictionary_url }}'

- name: Deactivate semantic dictionary
  when: tds_use_semantic_dictionary == "no"
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^semanticservice\.url=.*'
    replace: "semanticservice.url="


# Active switch to TDP or not
- name: Activate switch between TDS & TDP
  when: tds_use_tdp_switch == "yes"
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^#tds\.front\.tdpUrl=.*'
    replace: "tds.front.tdpUrl={{ tds_front_tdp_url }}"

- name: Deactivate switch between TDS & TDP
  when: tds_use_tdp_switch == "no"
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^tds\.front\.tdpUrl=.*'
    replace: "#tds.front.tdpUrl="

# Set the language
- name: Update language value (locale)
  replace:
    path: "{{ tds_config_location }}"
    regexp:  '^tds\.locale=.*'
    replace: 'tds.locale={{ tds_language }}'

# Set appender.http.url in audit.properties
- name: Update appender.http.url
  when: tds_hybrid_mode == "no" and tds_audit_enabled == "true"
  replace:
    path: "{{ tds_config_audit_location }}"
    regexp:  'appender\.http\.url=.*'
    replace: 'appender.http.url={{ tds_appender_http_url }}'

# Copy missing 'data-stewardship-monitoring-service-logback.xml' file
- name: Copy data-stewardship-monitoring-service-logback.xml
  copy:
    src: "{{ install_prefix }}/{{ rpm_folder }}/config/data-stewardship-monitoring-service-logback.xml"
    dest: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/data-stewardship-monitoring-service-logback.xml"
    mode: 0644
    owner: "{{install_user}}"
    group: "{{install_group}}"
    remote_src: yes

# Copy missing 'internal#data-stewardship-monitoring-service.xml' file
- name: "Copy internal#data-stewardship-monitoring-service.xml"
  copy:
    src: "{{ install_prefix }}/{{ rpm_folder }}/context/internal#data-stewardship-monitoring-service.xml"
    dest: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/Catalina/localhost/internal#data-stewardship-monitoring-service.xml"
    mode: 0644
    owner: "{{install_user}}"
    group: "{{install_group}}"
    remote_src: yes


# Hybrid stuff - activation
- name: Activate hybrid mode (1)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: "security.oauth2.resource.jwt.key-uri="
    line: "security.oauth2.resource.jwt.key-uri=${security.oidc.client.keyUri}"

- name: Activate hybrid mode (2)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'spring\.profiles\.active='
    line: "spring.profiles.active=hybrid"

- name: Activate hybrid mode (3)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'iam\.server\.url='
    line: "iam.server.url=https://api.{{ tds_hybrid_region }}.cloud.talend.com/v1/iam"

- name: Activate hybrid mode (4)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.portalUrl='
    line: "tds.front.portalUrl=https://portal.{{ tds_hybrid_region }}.cloud.talend.com/"

- name: Activate hybrid mode (5)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.pendoDataCenter='
    line: "tds.front.pendoDataCenter={{ tds_hybrid_data_center }}"

- name: Activate hybrid mode (6)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.pendoCloudProvider='
    line: "tds.front.pendoCloudProvider={{ tds_hybrid_cloud_provider }}"

- name: Activate hybrid mode (7)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.deploymentMode='
    line: "tds.front.deploymentMode=HYBRID"

- name: Activate hybrid mode (8)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'audit\.log\.enabled='
    line: "audit.log.enabled=false"

- name: Activate hybrid mode (9)
  when: tds_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.cloudDeployment='
    line: "tds.front.cloudDeployment=false"


# Hybrid stuff - Deactivation
- name: Deactivate hybrid mode (1)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: "security.oauth2.resource.jwt.key-uri="
    state: absent

- name: Deactivate hybrid mode (2)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'spring\.profiles\.active='
    state: absent

- name: Deactivate hybrid mode (3)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'iam\.server\.url='
    state: absent

- name: Deactivate hybrid mode (4)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds.front.portalUrl='
    state: absent

- name: Deactivate hybrid mode (5)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.pendoDataCenter='
    state: absent

- name: Deactivate hybrid mode (6)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.pendoCloudProvider='
    state: absent

- name: Deactivate hybrid mode (7)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.deploymentMode='
    line: "tds.front.deploymentMode=ON_PREMISE"

- name: Deactivate hybrid mode (8)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'audit\.log\.enabled='
    line: "audit.log.enabled=true"

- name: Deactivate hybrid mode (9)
  when: tds_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tds_config_location }}"
    regexp: 'tds\.front\.cloudDeployment='
    state: absent
