---
# This script used to update current application parameters (first install & upgrade)
# It can be run just after the installation or after some time (re-configuration)

#####
# Set the path to the tomcat config location of TSD
#####
- name: Set tsd_config_location when talend tomcat is used or customer tomcat in shared mode
  when: app_use_talend_tomcat == 'yes' or (app_use_talend_tomcat == 'no' and app_tomcat_mode == 'shared')
  set_fact:
    tsd_config_location: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/data-quality.properties"

- name: Set tsd_config_audit_location when talend tomcat is used or customer tomcat in shared mode
  when: app_use_talend_tomcat == 'yes' or (app_use_talend_tomcat == 'no' and app_tomcat_mode == 'shared')
  set_fact:
    tsd_config_audit_location: "{{ install_prefix }}/{{ rpm_folder }}/tomcat/conf/audit.properties"

- name: Set tsd_config_location when customer tomcat is used in direct mode
  when: app_use_talend_tomcat == 'no' and app_tomcat_mode == 'direct'
  set_fact:
    tsd_config_location: "{{ app_tomcat_home }}/conf/data-quality.properties"

- name: Set tsd_config_audit_location when customer tomcat is used in direct mode
  when: app_use_talend_tomcat == 'no' and app_tomcat_mode == 'direct'
  set_fact:
    tsd_config_audit_location: "{{ app_tomcat_home }}/conf/audit.properties"

#####
# Update TSD configuration
#####
# Kafka
- name: Update kafka brokers
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^spring\.cloud\.stream\.kafka\.binder\.brokers=.*'
    replace: 'spring.cloud.stream.kafka.binder.brokers={{ tsd_kafka_host }}'

- name: Update kafka port
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^spring\.cloud\.stream\.kafka\.binder\.defaultBrokerPort=.*'
    replace: 'spring.cloud.stream.kafka.binder.defaultBrokerPort={{ tsd_kafka_port }}'


# Zookeeper
- name: Update zookeeper nodes
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^spring\.cloud\.stream\.kafka\.binder\.zkNodes=.*'
    replace: 'spring.cloud.stream.kafka.binder.zkNodes={{ tsd_zookeeper_host }}'

- name: Update zookeeper port
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^spring\.cloud\.stream\.kafka\.binder\.defaultZkPort=.*'
    replace: 'spring.cloud.stream.kafka.binder.defaultZkPort={{ tsd_zookeeper_port }}'


# MongoDB
- name: Update MongoDB hosts
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.mongodb\.host=.*'
    replace: '.mongodb.host={{ tsd_mongo_host }}'

- name: Update MongoDB port
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.mongodb\.port=.*'
    replace: '.mongodb.port={{ tsd_mongo_port }}'

- name: Update MongoDB dbname
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.mongodb\.database=.*'
    replace: '.mongodb.database={{ tsd_mongo_database }}'

- name: Update MongoDB user
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.mongodb\.username=.*'
    replace: '.mongodb.username={{ tsd_mongo_username }}'

- name: Update MongoDB password
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.mongodb\.password=.*'
    replace: '.mongodb.password={{ tsd_mongo_password }}'


# Security / authentication
- name: Update scim url (IAM) (non-hybrid)
  when: tsd_hybrid_mode == 'no'
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^scim\.url=.*'
    replace: 'scim.url={{ tsd_security_scim_url }}'

- name: Update oidc url (non-hybrid)
  when: tsd_hybrid_mode == 'no'
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^oidc\.url=.*'
    replace: 'oidc.url={{ tsd_security_oidc_url }}'

- name: Update scim url (IAM) (hybrid)
  when: tsd_hybrid_mode != 'no'
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^scim\.url=.*'
    replace: 'scim.url=https://api.{{ tsd_hybrid_region }}.cloud.talend.com/v1/scim'

- name: Update oidc url (hybrid)
  when: tsd_hybrid_mode != 'no'
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^oidc\.url=.*'
    replace: 'oidc.url=https://iam.{{ tsd_hybrid_region }}.cloud.talend.com/oidc'

- name: Update oidc gateway ID
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^oidc\.semanticservice\.id=.*'
    replace: 'oidc.semanticservice.id={{ tsd_oidc_id }}'

- name: Update oidc gateway secret
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '^oidc\.semanticservice\.secret=.*'
    replace: 'oidc.semanticservice.secret={{ tsd_oidc_secret }}'

# Set appender.http.url in audit.properties
- name: Update appender.http.url
  when: tsd_hybrid_mode == "no" and tsd_audit_log_enabled == "true"
  replace:
    path: "{{ tsd_config_audit_location }}"
    regexp:  'appender\.http\.url=.*'
    replace: 'appender.http.url={{ tsd_appender_http_url }}'

- name: Comment appender.http.url (audit disabled)
  when: tsd_hybrid_mode == "no" and tsd_audit_log_enabled == "false"
  replace:
    path: "{{ tsd_config_audit_location }}"
    regexp:  'appender\.http\.url=.*'
    replace: '#appender.http.url='

- name: Comment appender.socket.host
  when: tsd_hybrid_mode == "no"
  replace:
    path: "{{ tsd_config_audit_location }}"
    regexp:  'appender\.socket\.host=.*'
    replace: '#appender.socket.host='

- name: Comment appender.socket.port
  when: tsd_hybrid_mode == "no"
  replace:
    path: "{{ tsd_config_audit_location }}"
    regexp:  'appender\.socket\.port=.*'
    replace: '#appender.socket.port='

# Hybrid mode activation
- name: Activate hybrid mode (1)
  when: tsd_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: "security.oauth2.resource.jwt.key-uri="
    line: "security.oauth2.resource.jwt.key-uri=${security.oidc.client.keyUri}"

- name: Activate hybrid mode (2)
  when: tsd_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: 'spring\.profiles\.active='
    line: "spring.profiles.active=hybrid"

- name: Activate hybrid mode (3)
  when: tsd_hybrid_mode == 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: 'audit\.log\.enabled='
    line: "audit.log.enabled=false"


# Hybrid mode de-activation
- name: Deactivate hybrid mode (1)
  when: tsd_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: "security.oauth2.resource.jwt.key-uri="
    state: absent

- name: Deactivate hybrid mode (2)
  when: tsd_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: 'spring\.profiles\.active='
    state: absent

- name: Deactivate hybrid mode (3)
  when: tsd_hybrid_mode != 'yes'
  lineinfile:
    path: "{{ tsd_config_location }}"
    regexp: 'audit\.log\.enabled='
    line: "audit.log.enabled={{ tsd_audit_log_enabled }}"

## AWS S3 communication
- name: Update AWS S3 endpoint URL
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.s3\.endpoint=.*'
    replace: '.s3Repository.s3.endpoint={{ tsd_s3endpoint }}'

- name: Update AWS S3 bucket URL
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.bucket-url=.*'
    replace: '.s3Repository.bucket-url=s3://{{ tsd_s3bucket }}'

- name: Update AWS S3 username
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.username=.*'
    replace: '.s3Repository.username={{ tsd_s3user }}'

- name: Update AWS S3 password
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.password=.*'
    replace: '.s3Repository.password={{ tsd_s3pass }}'

- name: Update AWS S3 region
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.s3\.region=.*'
    replace: '.s3Repository.s3.region={{ tsd_s3region }}'

- name: Update AWS S3 base path
  replace:
    path: "{{ tsd_config_location }}"
    regexp:  '\.s3Repository\.base-path=.*'
    replace: '.s3Repository.base-path={{ tsd_basepath }}'
